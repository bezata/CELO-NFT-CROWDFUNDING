{"version":3,"sources":["components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","components/minter/Cover.js","hooks/useMinterContract.js","hooks/useContract.js","assests/img/Giving.webp","utils/minter.js","components/minter/nfts/Add.js","components/minter/nfts/card.js","components/ui/Loader.js","components/minter/nfts/index.js","App.js","hooks/useBalance.js","reportWebVitals.js","index.js"],"names":["Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","Cover","name","coverImg","connect","background","minHeight","maxWidth","src","alt","Button","catch","e","console","log","useMinterContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","kit","web3","eth","Contract","useContract","MyNFTAbi","MyNFTContractAddress","MyNFT","client","Web3Storage","token","process","formatName","encodeURI","convertObjectToFile","data","blob","Blob","JSON","stringify","type","File","createNft","minterContract","performActions","description","ipfsImage","ownerAddress","goal","defaultAccount","image","owner","fileName","files","put","cid","url","methods","createCampaign","send","from","uploadFileToWebStorage","file","imageName","getNfts","nfts","totalSupply","call","nftsLength","i","nft","Promise","resolve","tokenURI","res","fetchNftMeta","meta","fetchNftOwner","getCampaign","p","index","fundsRaised","push","Number","all","ipfsUrl","axios","get","ownerOf","fetchNftContractOwner","handleDonate","donationAmount","setDonated","tokenId","donate","value","utils","toWei","toString","prevFundsRaised","handleWithdraw","withdraw","AddNfts","save","setName","setIpfsImage","setDescription","setGoal","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","placeholder","onChange","imageUrl","alert","Label","Footer","disabled","NftCard","etherValue","setLoading","donated","setTokenId","setDonationAmount","forDonate","toast","error","forWithdraw","Col","Card","Badge","bg","objectFit","Text","Row","Loader","role","NftList","setNfts","loading","setNftOwner","getAssets","allNfts","addNft","fetchContractOwner","_address","Add","xs","sm","lg","map","_nft","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.89d1829e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nconst Notification = () => (\r\n  <ToastContainer\r\n    position=\"bottom-center\"\r\n    autoClose={5000}\r\n    hideProgressBar\r\n    newestOnTop\r\n    closeOnClick\r\n    rtl={false}\r\n    pauseOnFocusLoss\r\n    draggable={false}\r\n    pauseOnHover\r\n  />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst Props = {\r\n  text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n  text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };\r\n","import {ERC20_DECIMALS} from \"./constants\";\r\n\r\n// format a wallet address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\r\n}\r\n\r\n// convert from big number\r\nexport const formatBigNumber = (num) => {\r\n    if (!num) return\r\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\r\n}","const ERC20_DECIMALS = 18;\r\nexport { ERC20_DECIMALS };\r\n","import { useEffect, useRef } from \"react\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\n\r\nexport default function Identicon({ address, size, ...rest }) {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    if (address && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(\r\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\r\n      );\r\n    }\r\n  }, [address, size]);\r\n\r\n  return (\r\n    <div {...rest}>\r\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\r\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\r\nimport Identicon from \"./ui/Identicon\";\r\n\r\nconst Wallet = ({ address, amount, symbol, destroy }) => {\r\n  if (address) {\r\n    return (\r\n      <>\r\n        <Dropdown>\r\n          <Dropdown.Toggle\r\n            variant=\"light\"\r\n            align=\"end\"\r\n            id=\"dropdown-basic\"\r\n            className=\"d-flex align-items-center border rounded-pill py-1\"\r\n          >\r\n            {amount ? (\r\n              <>\r\n                {formatBigNumber(amount)}{\" \"}\r\n                <span className=\"ms-1\"> {symbol}</span>\r\n              </>\r\n            ) : (\r\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\r\n            )}\r\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu className=\"shadow-lg border-0\">\r\n            <Dropdown.Item\r\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\r\n              target=\"_blank\"\r\n            >\r\n              <Stack direction=\"horizontal\" gap={2}>\r\n                <i className=\"bi bi-person-circle fs-4\" />\r\n                <span className=\"font-monospace\">\r\n                  {truncateAddress(address)}\r\n                </span>\r\n              </Stack>\r\n            </Dropdown.Item>\r\n            <Dropdown.Divider />\r\n            <Dropdown.Item\r\n              as=\"button\"\r\n              className=\"d-flex align-items-center\"\r\n              onClick={() => {\r\n                destroy();\r\n              }}\r\n            >\r\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\r\n              Disconnect\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Wallet;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cover = ({ name, coverImg, connect }) => {\r\n  if (name) {\r\n    return (\r\n      <div\r\n        className=\"d-flex justify-content-center flex-column text-center \"\r\n        style={{ background: \"#000\", minHeight: \"100vh\" }}\r\n      >\r\n        <div className=\"mt-auto text-light mb-5\">\r\n          <div\r\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\r\n            style={{ maxWidth: \"320px\" }}\r\n          >\r\n            <img src={coverImg} alt=\"\" />\r\n          </div>\r\n          <h1>{name}</h1>\r\n          <p>Please connect your wallet to continue.</p>\r\n          <Button\r\n            onClick={() => connect().catch((e) => console.log(e))}\r\n            variant=\"outline-light\"\r\n            className=\"rounded-pill px-3 mt-3\"\r\n          >\r\n            Connect Wallet\r\n          </Button>\r\n        </div>\r\n\r\n        <p className=\"mt-auto text-secondary\">Powered by Celo</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nCover.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\r\nCover.defaultProps = {\r\n  name: \"\",\r\n};\r\n\r\nexport default Cover;","import { useContract } from \"./useContract\";\r\nimport MyNFTAbi from \"../contracts/MyNFT.json\";\r\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\r\n\r\nexport const useMinterContract = () =>\r\n  useContract(MyNFTAbi.abi, MyNFTContractAddress.MyNFT);","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nexport const useContract = (abi, contractAddress) => {\r\n  const { getConnectedKit, address } = useContractKit();\r\n  const [contract, setContract] = useState(null);\r\n\r\n  const getContract = useCallback(async () => {\r\n    const kit = await getConnectedKit();\r\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\r\n  }, [getConnectedKit, abi, contractAddress]);\r\n\r\n  useEffect(() => {\r\n    if (address) getContract();\r\n  }, [address, getContract]);\r\n\r\n  return contract;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/Giving.cf0884d0.webp\";","import axios from \"axios\";\r\nimport { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js'\r\n\r\n// initialize IPFS\r\nconst client = new Web3Storage({\r\n    token: process.env.REACT_APP_STORAGE_API_KEY\r\n});\r\n\r\nconst formatName = (name) => {\r\n    // replace all spaces with %20\r\n    return encodeURI(name);\r\n};\r\n\r\n// object to convert to file\r\nconst convertObjectToFile = (data) => {\r\n    const blob = new Blob([JSON.stringify(data)], { type: \"application/json\" });\r\n    const files = [new File([blob], `${data.name}.json`)];\r\n    return files;\r\n};\r\n\r\n// mint an NFT\r\nexport const createNft = async (\r\n    minterContract,\r\n    performActions,\r\n    { name, description, ipfsImage, ownerAddress, goal }\r\n) => {\r\n    await performActions(async (kit) => {\r\n        if (!name || !description || !ipfsImage || !goal) return;\r\n        const { defaultAccount } = kit;\r\n\r\n        const data = {\r\n            name,\r\n            description,\r\n            image: ipfsImage,\r\n            owner: defaultAccount,\r\n            goal,\r\n        };\r\n\r\n        try {\r\n\r\n            // trim any extra whitespaces from the name and\r\n            // replace the whitespace between the name with %20\r\n            const fileName = formatName(name);\r\n\r\n            //  bundle nft metadata into a file\r\n            const files = convertObjectToFile(data);\r\n\r\n            // save NFT metadata to web3 storage\r\n            const cid = await client.put(files);\r\n\r\n            // IPFS url for uploaded metadata\r\n            const url = `https://${cid}.ipfs.w3s.link/${fileName}.json`;\r\n\r\n            // mint the NFT and save the IPFS url to the blockchain\r\n            return await minterContract.methods\r\n                .createCampaign(ownerAddress, url)\r\n                .send({ from: defaultAccount });\r\n\r\n        } catch (error) {\r\n            console.log(\"Error uploading file: \", error);\r\n        }\r\n    });\r\n};\r\n\r\n// function to upload a file to IPFS via web3.storage\r\nexport const uploadFileToWebStorage = async (e) => {\r\n    // Construct with token and endpoint\r\n    const client = new Web3Storage({ token: process.env.REACT_APP_STORAGE_API_KEY })\r\n    const files = e.target.files;\r\n    const file = files[0];\r\n    const fileName = file.name;\r\n    const imageName = formatName(fileName);\r\n    const cid = await client.put(files);\r\n    return `https://${cid}.ipfs.w3s.link/${imageName}`;\r\n\r\n}\r\n\r\n\r\n// fetch all NFTs on the smart contract\r\nexport const getNfts = async (minterContract) => {\r\n    try {\r\n        const nfts = [];\r\n        const nftsLength = await minterContract.methods.totalSupply().call();\r\n        for (let i = 0; i < Number(nftsLength); i++) {\r\n            const nft = new Promise(async (resolve) => {\r\n                const res = await minterContract.methods.tokenURI(i).call();\r\n                const meta = await fetchNftMeta(res);\r\n                const owner = await fetchNftOwner(minterContract, i);\r\n                let p = await minterContract.methods.getCampaign(i).call();\r\n                resolve({\r\n                    index: i,\r\n                    owner,\r\n                    name: meta.data.name,\r\n                    image: meta.data.image,\r\n                    description: meta.data.description,\r\n                    goal: meta.data.goal,\r\n                    fundsRaised: p[1]\r\n\r\n                });\r\n            });\r\n            nfts.push(nft);\r\n        }\r\n        return Promise.all(nfts);\r\n    } catch (e) {\r\n        console.log({ e });\r\n    }\r\n};\r\n\r\n// get the metedata for an NFT from IPFS\r\nexport const fetchNftMeta = async (ipfsUrl) => {\r\n    try {\r\n        if (!ipfsUrl) return null;\r\n        const meta = await axios.get(ipfsUrl);\r\n        return meta;\r\n    } catch (e) {\r\n        console.log({ e });\r\n    }\r\n};\r\n\r\n\r\n// get the owner address of an NFT\r\nexport const fetchNftOwner = async (minterContract, index) => {\r\n    try {\r\n        return await minterContract.methods.ownerOf(index).call();\r\n    } catch (e) {\r\n        console.log({ e });\r\n    }\r\n};\r\n\r\n// get the address that deployed the NFT contract\r\nexport const fetchNftContractOwner = async (minterContract) => {\r\n    try {\r\n        let owner = await minterContract.methods.owner().call();\r\n        return owner;\r\n    } catch (e) {\r\n        console.log({ e });\r\n    }\r\n};\r\n\r\n\r\n// Donate to the fundraiser\r\nexport const handleDonate = async (minterContract, performActions, donationAmount,setDonated,tokenId) => {\r\n    try {\r\n        await performActions(async (kit) => {\r\n            const { defaultAccount } = kit;\r\n            if (!donationAmount) return;\r\n            await minterContract.methods.donate(tokenId).send({\r\n                from: defaultAccount,\r\n                value: kit.web3.utils.toWei(donationAmount.toString(), \"ether\"),\r\n            });\r\n            setDonated((prevFundsRaised) => prevFundsRaised + donationAmount);\r\n            //setDonationAmount(0);\r\n        })\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n};\r\n\r\n// Withdraw from youtr campaign\r\nexport const handleWithdraw = async (minterContract, performActions,tokenId) => {\r\n    try {\r\n        await performActions(async (kit) => {\r\n            const { defaultAccount } = kit;\r\n           \r\n            await minterContract.methods.withdraw(tokenId).send({\r\n                from: defaultAccount,\r\n            });\r\n           \r\n        })\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n","/* eslint-disable react/jsx-filename-extension */\r\nimport React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Button, Modal, Form, FloatingLabel} from \"react-bootstrap\";\r\nimport {uploadFileToWebStorage} from \"../../../utils/minter\";\r\n\r\n\r\n\r\nconst AddNfts = ({save, address}) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [ipfsImage, setIpfsImage] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [goal, setGoal] = useState(0);\r\n\r\n  //store attributes of an NFT\r\n  \r\n  const [show, setShow] = useState(false);\r\n\r\n\r\n  // check if all form data has been filled\r\n  const isFormFilled = () =>\r\n      name && ipfsImage && description && goal;\r\n\r\n  // close the popup modal\r\n  const handleClose = () => {\r\n    setShow(false);\r\n\r\n  };\r\n\r\n  // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={handleShow}\r\n        variant=\"dark\"\r\n        className=\"rounded-pill px-0\"\r\n        style={{ width: \"38px\" }}\r\n      >\r\n        <i className=\"bi bi-plus\"></i>\r\n      </Button>\r\n\r\n      {/* Modal */}\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create NFT</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <Form>\r\n            <FloatingLabel\r\n              controlId=\"inputLocation\"\r\n              label=\"Name\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Name of NFT\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputDescription\"\r\n              label=\"Description\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"description\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <Form.Control\r\n              type=\"file\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                  const imageUrl = await uploadFileToWebStorage(e)\r\n                  if (!imageUrl) {\r\n                      alert(\"failed to upload image\");\r\n                      return;\r\n                  }\r\n                  setIpfsImage(imageUrl);\r\n              }\r\n              }\r\n              placeholder=\"Campaign name\"\r\n            />\r\n            <Form.Label>\r\n              <h5>Campaign Goal</h5>\r\n            </Form.Label>\r\n            <Form.Control\r\n                type=\"number\"\r\n               \r\n                placeholder=\"Set Campaign Goal\"\r\n                style={{ height: \"50px\" }}\r\n                onChange={(e) => {\r\n                  setGoal(e.target.value);\r\n                }}\r\n              />\r\n\r\n          </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"dark\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              save({\r\n                name,\r\n                ipfsImage,\r\n                description,\r\n                ownerAddress: address,\r\n                goal,\r\n              });\r\n              handleClose();\r\n            }}\r\n          >\r\n            Create NFT\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nAddNfts.propTypes = {\r\n\r\n  // props passed into this component\r\n  save: PropTypes.func.isRequired,\r\n  address: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default AddNfts;","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\r\nimport { truncateAddress } from \"../../../utils\";\r\nimport Identicon from \"../../ui/Identicon\";\r\nimport { handleDonate, handleWithdraw } from \"../../../utils/minter\";\r\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { useMinterContract } from \"../../../hooks/useMinterContract\";\r\n\r\n\r\n\r\n\r\nconst NftCard = ({ nft }) => {\r\n  const { image, description, owner, name, index, goal, fundsRaised } = nft;\r\n\r\n  const etherValue = fundsRaised / 10 ** 18;\r\n\r\n\r\n  const [ setLoading] = useState(false);\r\n  const [donated, setDonated] = useState(etherValue);\r\n  const [tokenId, setTokenId] = useState(\"\");\r\n  const [donationAmount, setDonationAmount] = useState(\"\");\r\n\r\n\r\n\r\n  const { performActions, address } = useContractKit();\r\n  const minterContract = useMinterContract();\r\n\r\n\r\n////Function for Donating\r\n\r\n  const forDonate = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // call the donate() function on the smart contract\r\n      await handleDonate(minterContract, performActions, donationAmount, setDonated, tokenId);\r\n      setDonationAmount(\"\");\r\n      setTokenId(\"\");\r\n      toast(<NotificationSuccess text=\"Donation made successfully!\" />);\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to make donation.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n////Function for Withdrawing\r\n\r\n  const forWithdraw = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // call the donate() function on the smart contract\r\n      await handleWithdraw(minterContract, performActions, tokenId);\r\n      \r\n      toast(<NotificationSuccess text=\"Withdraw successfully!\" />);\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to make withdrawal.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n\r\n  return (\r\n    <Col key={index}>\r\n      <Card className=\" h-100\">\r\n        <Card.Header>\r\n          <Stack direction=\"horizontal\" gap={2}>\r\n            <Identicon address={owner} size={28} />\r\n            <span className=\"font-monospace text-secondary\">\r\n              {truncateAddress(owner)}\r\n            </span>\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              {index} ID\r\n            </Badge>\r\n            {owner === address? \r\n            (\r\n              <button onClick={forWithdraw}>Withdraw</button>\r\n            )\r\n            :\r\n            (\r\n              <button onClick={forDonate}>Donate</button>\r\n            )\r\n\r\n            }\r\n           \r\n          </Stack>\r\n        </Card.Header>\r\n\r\n        <div className=\" ratio ratio-4x3\">\r\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\r\n        </div>\r\n\r\n        <Card.Body className=\"d-flex  flex-column text-center\">\r\n          <Card.Title>{name}</Card.Title>\r\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\r\n          <div>\r\n            <Row className=\"mt-2\">\r\n\r\n              <Col>\r\n                <div className=\"border rounded bg-light\">\r\n                  <div className=\"text-secondary fw-lighter small text-capitalize\">\r\n                    Goal\r\n                  </div>\r\n                  <div className=\"text-secondary text-capitalize font-monospace\">\r\n                    {goal} CELO\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n              <Col>\r\n                <div className=\"border rounded bg-light\">\r\n                  <div className=\"text-secondary fw-lighter small text-capitalize\">\r\n                    funds raised:\r\n                  </div>\r\n\r\n                  <div className=\"text-secondary text-capitalize font-monospace \">\r\n                    {Number(donated).toFixed(1)} CELO\r\n                  </div>\r\n\r\n                </div>\r\n              </Col>\r\n\r\n\r\n            </Row>\r\n\r\n            <Col className=\"mt-3\">\r\n              {owner === address ? \r\n              (\r\n              <div className=\"border rounded bg-light\">\r\n                <div className=\"text-secondary fw-lighter small text-capitalize\">\r\n                  Withdraw Funds\r\n                </div>\r\n                <div className=\"text-secondary text-capitalize font-monospace mb-2\">\r\n                  <input type=\"text\" placeholder=\"campaign ID\" value={tokenId} onChange={(e) => setTokenId(e.target.value)} />\r\n                </div>\r\n              </div>\r\n              )\r\n\r\n\r\n                :\r\n                (\r\n                  <div className=\"border rounded bg-light\">\r\n                    <div className=\"text-secondary fw-lighter small text-capitalize\">\r\n                      Donate to this campaign\r\n                    </div>\r\n                    <div className=\"text-secondary text-capitalize font-monospace mb-2\">\r\n                      <input type=\"text\" placeholder=\"campaign ID\" value={tokenId} onChange={(e) => setTokenId(e.target.value)} />\r\n                      <input\r\n                        type=\"number\"\r\n                        placeholder=\"Donation amount\"\r\n                        value={donationAmount}\r\n                        onChange={(e) => setDonationAmount(parseInt(e.target.value))}\r\n                      />\r\n\r\n                    </div>\r\n                  </div>\r\n                )\r\n\r\n              }\r\n            </Col>\r\n\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nNftCard.propTypes = {\r\n\r\n  // props passed into this component\r\n  nft: PropTypes.instanceOf(Object).isRequired,\r\n};\r\n\r\nexport default NftCard;","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"d-flex justify-content-center\">\r\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n);\r\nexport default Loader;\r\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\nimport AddNfts from \"./Add\";\r\nimport Nft from \"./card\";\r\nimport Loader from \"../../ui/Loader\";\r\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\r\n\r\n\r\nimport {\r\n  getNfts,\r\n  createNft,\r\n  fetchNftContractOwner,\r\n\r\n  \r\n} from \"../../../utils/minter\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\n//import { ethers } from \"ethers\";\r\n\r\nconst NftList = ({minterContract, name}) => {\r\n\r\n \r\n\r\n  /* performActions : used to run smart contract interactions in order\r\n  *  address : fetch the address of the connected wallet\r\n  */\r\n  const {performActions, address} = useContractKit();\r\n  const [nfts, setNfts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [ setNftOwner] = useState(null);\r\n\r\n  \r\n  \r\n \r\n\r\n  const getAssets = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // fetch all nfts from the smart contract\r\n      const allNfts = await getNfts(minterContract);\r\n      if (!allNfts) return\r\n      setNfts(allNfts);\r\n    } catch (error) {\r\n      console.log({ error });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [minterContract]);\r\n\r\n  const addNft = async (data) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // create an nft functionality\r\n      await createNft(minterContract, performActions, data);\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\"/>);\r\n      getAssets();\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  /////////////////////////////\r\n \r\n\r\n\r\n  \r\n  \r\n  /////////////////////////////////////\r\n  \r\n\r\n  const fetchContractOwner = useCallback(async (minterContract) => {\r\n\r\n    // get the address that deployed the NFT contract\r\n    const _address = await fetchNftContractOwner(minterContract);\r\n    setNftOwner(_address);\r\n  }, [setNftOwner]);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (address && minterContract) {\r\n        getAssets();\r\n        fetchContractOwner(minterContract);\r\n        \r\n\r\n      }\r\n    } catch (error) {\r\n      console.log({ error });\r\n    }\r\n  }, [minterContract, address, getAssets, fetchContractOwner ]);\r\n  if (address) {\r\n    return (\r\n      <>\r\n        {!loading ? (\r\n          <>\r\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\r\n\r\n              {/* give the add NFT permission to user who deployed the NFT smart contract */}\r\n             \r\n            \r\n             {/** {nftOwner === address ? (\r\n                  <AddNfts save={addNft} address={address}/>\r\n              ) : null} */}\r\n\r\n<AddNfts save={addNft} address={address}/>\r\n  \r\n             \r\n\r\n            </div>\r\n\r\n           \r\n            {nfts.length > 0 ? (\r\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\r\n\r\n              {/* display all NFTs */}\r\n              {nfts.map((_nft) => (\r\n                  <Nft\r\n                      key={_nft.index}\r\n                      nft={{\r\n                        ..._nft,\r\n                      }}\r\n                  />\r\n              ))}\r\n            </Row>\r\n             ) : (\r\n              <p className=\"text-center my-5 fs-2\">No uploaded NFT card available</p>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nNftList.propTypes = {\r\n\r\n  // props passed into this component\r\n  minterContract: PropTypes.instanceOf(Object),\r\n  updateBalance: PropTypes.func.isRequired,\r\n};\r\n\r\nNftList.defaultProps = {\r\n  minterContract: null,\r\n};\r\n\r\nexport default NftList;","import React from \"react\";\r\nimport { Container, Nav } from \"react-bootstrap\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { Notification } from \"./components/ui/Notifications\";\r\nimport Wallet from \"./components/Wallet\";\r\nimport Cover from \"./components/minter/Cover\";\r\n//import Counter from \"./components/Counter\";\r\nimport { useBalance, useMinterContract } from \"./hooks\";\r\nimport coverImg from \"./assests/img/Giving.webp\";\r\nimport \"./App.css\";\r\n//import Cover from \"./components/minter/Cover\";\r\nimport Nfts from \"./components/minter/nfts\";\r\n\r\nconst App = function AppWrapper() {\r\n  const { address, destroy, connect } = useContractKit();\r\n  const { balance, getBalance } = useBalance();\r\n  const minterContract = useMinterContract();\r\n\r\n  // ...\r\n  return (\r\n    <>\r\n      <Notification />\r\n      {address ? (\r\n        <Container fluid=\"md\">\r\n          <Nav className=\"justify-content-end pt-3 pb-5\">\r\n            <Nav.Item>\r\n              <Wallet\r\n                address={address}\r\n                amount={balance.CELO}\r\n                symbol=\"CELO\"\r\n                destroy={destroy}\r\n              />\r\n            </Nav.Item>\r\n          </Nav>\r\n          <main>\r\n            <Nfts\r\n              name=\"Campaign Collection\"\r\n              updateBalance={getBalance}\r\n              minterContract={minterContract}\r\n            />\r\n          </main>\r\n        </Container>\r\n      ) : (\r\n        <Cover name=\"CELO CROWD FUNDING\" coverImg={coverImg} connect={connect} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nexport const useBalance = () => {\r\n  const { address, kit } = useContractKit();\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  const getBalance = useCallback(async () => {\r\n    // fetch a connected wallet token balance\r\n    const value = await kit.getTotalBalance(address);\r\n    setBalance(value);\r\n  }, [address, kit]);\r\n\r\n  useEffect(() => {\r\n    if (address) getBalance();\r\n  }, [address, getBalance]);\r\n\r\n  return {\r\n    balance,\r\n    getBalance,\r\n  };\r\n};\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  ContractKitProvider,\r\n  Alfajores,\r\n  NetworkNames,\r\n} from \"@celo-tools/use-contractkit\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ContractKitProvider\r\n      networks={[Alfajores]}\r\n      network={{\r\n        name: NetworkNames.Alfajores,\r\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\r\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\r\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\r\n        chainId: 44787,\r\n      }}\r\n      dapp={{\r\n        name: \"Celo React Boilerplate\",\r\n        description: \"A React Boilerplate for Celo Dapps\",\r\n      }}\r\n    >\r\n     \r\n      <App />\r\n    \r\n    </ContractKitProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}